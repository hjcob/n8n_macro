{
  "name": "[11LABS-VIVO] DETECTOR DE INTENÇÃO",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "CONVERSATIONS",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "state",
              "condition": "eq",
              "keyValue": "queue"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        176,
        0
      ],
      "id": "a970108b-21e8-46d6-9ad1-64434cf64fa0",
      "name": "Get many rows",
      "credentials": {
        "supabaseApi": {
          "id": "cXdeWXmWkY5vzgPy",
          "name": "SUPABASE"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "968646a0-d05b-4d98-a613-06ebdf170caf",
              "name": "conversationId",
              "value": "={{ $json.conversationId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        0
      ],
      "id": "a1ce2e94-ece2-4e6c-81ab-e45b7ec5d321",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "507ecf42-e525-43ec-83b2-28b07df45799",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        560,
        0
      ],
      "id": "ae18a112-c073-4987-95df-b4baaf1758e7",
      "name": "Loop Over Items1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "99a030b0-0eff-4740-b46e-0c1a1bcab5cb",
              "name": "transcript",
              "value": "={{ $json.transcript }}",
              "type": "array"
            },
            {
              "id": "f394530f-1742-4d7c-9433-79b1eaa985c4",
              "name": "conversationId",
              "value": "={{ $json.conversation_id }}",
              "type": "string"
            },
            {
              "id": "fa4414d9-f603-45f0-b161-3ccb09ab33e3",
              "name": "telefoneSecundario",
              "value": "={{ $json.metadata.phone_call.external_number }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1008,
        16
      ],
      "id": "7d09b49d-3422-407f-80f2-4b01d9d5babe",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1360,
        32
      ],
      "id": "b95b2168-71f2-46a1-af8d-9e01cd37b14a",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "P2CyEzIlaHKQukvm",
          "name": "OPEN AI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtém o array transcript que vem no item corrente\nconst transcript = $json.transcript;\nconst conversationId = $json.conversationId;\nconst telefoneSecundario = $input.first().json.telefoneSecundario\n\n// Validação opcional: garante que transcript é um array\nif (!Array.isArray(transcript)) {\n  throw new Error('transcript precisa ser um array');\n}\n\n/*\n * Percorre cada posição do array -- transcript[0], transcript[1]...\n * Desestrutura apenas as chaves desejadas (role e message)\n * e devolve um novo objeto com elas.\n */\nconst cleanTranscript = transcript.map(({ role, message, time_in_call_secs }) => ({\n  role,\n  message,\n  time_in_call_secs\n}));\n\n// Retorna no formato que o n8n espera (array de itens com chave json)\nreturn [\n  {\n    json: {\n      cleanTranscript,\n      conversationId\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        16
      ],
      "id": "76b55dc5-b87d-48ed-8f92-d109a6050df1",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "CONVERSATIONS",
        "filterType": "string",
        "filterString": "=conversationId=eq.{{ $json.conversationId }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "transcript",
              "fieldValue": "={{ $json.transcript }}"
            },
            {
              "fieldId": "state",
              "fieldValue": "intended"
            },
            {
              "fieldId": "product",
              "fieldValue": "={{ $json.plano_escolhido }}"
            },
            {
              "fieldId": "telefoneSecundario",
              "fieldValue": "={{ $('Edit Fields1').item.json.telefoneSecundario }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1936,
        16
      ],
      "id": "29ade980-1340-4eb7-801e-f061b2f206cd",
      "name": "SANITIZAR DADO",
      "credentials": {
        "supabaseApi": {
          "id": "cXdeWXmWkY5vzgPy",
          "name": "SUPABASE"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Prompt Otimizado para detecção de tipo de \n\n## Contexto\nVocê é um especialista em análise de conversas de agentes de voz. Sua tarefa é identificar se essa é uma conversa\nsobre o plano VIVO TOTAL ou VIVO FIBRA.\n\n## Identificação da plano VIVO TOTAL\n4918426000063651565 - Vivo Total Pro (500 MEGA + 50GB) - R$160,00\n4918426001245959554 - Vivo Total Ultra (700MEGA + 70GB) - R$190,00\n\n## Identificação da plano VIVO FIBRA\n4918426000629515444 - 600Mega - R$100\n4918426000014436145 - 700Mega - R$150,00\n4918426000014436141 - 1Giga - R$300,00\n\n\n## Instruções Detalhadas\n\n### 1. Estrutura de Input\nA conversa será fornecida como array JSON onde cada objeto tem:\n- `role`: \"agent\" (IA) ou \"user\" (usuário) \n- `message`: mensagem\n- `time_in_call_secs`:numérico com a quantidade de segundos.\n\n**Passo 1 - Leitura Completa:**\n- Leia toda a conversa sequencialmente ANTES DE FAZER QUALQUER COISA.\n- Identifique padrões de perguntas do agente e respostas do usuário\n- Marque momentos onde informações específicas são solicitadas e fornecidas\n\n**Passo 2 - Identificação do momento de escolha de plano:**\nPara cada campo solicitado, procure por:\n- Menções diretas da informação do plano escolhido\n- Confirmações implícitas ou explícitas\n- Formatos alternativos da mesma informação\n- Quando encontrar o plano escolhido guarde essa informação\n\n**Passo 3 - Confirmação do plano:**\n- SEMPRE fique com a última informação de plano escolhido\n- Se houver a troca de plano guarde essa informação\n- caso não consiga definir o plano escolhido ou o cliente queira outro plano ou serviço\nguarde a informação como 'INDEFINIDO'.\n- Não retorne erro caso não entenda o plano, apenas guarde como 'INDEFINIDO'\n\n\n### 2. Formato de Resposta Final\n\n{\n  \"transcript\": {{ JSON.stringify( $json.cleanTranscript ) }},\n  \"plano_escolhido\" : preencha com 'VIVO TOTAL', 'VIVO FIBRA' ou 'INDEFINIDO', \n\"conversationId\":{{ $json.conversationId }}\n\n}\n\n### 3. Princípios Importantes\n\n\n- **Formato de Saída**: sempre retorne uma string json válida sem nenhuma formatação\n\n\n\n### 4. Segue a conversa\n{{ $json.cleanTranscript }}",
        "options": {
          "systemMessage": "You are a helpful assistant"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1360,
        -192
      ],
      "id": "ecbc052c-39d4-43ee-afc8-f6301a3c74ea",
      "name": "DETECTOR DE INTENCAO",
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Entrada: string JSON\nconst inputString = $input.first().json.output\n// Transformar string em JSON\ntry {\n  const parsedData = JSON.parse(inputString);\n  return [{ json: parsedData }];\n} catch (error) {\n  throw new Error(\"Erro ao converter a string para JSON: \" + error.message);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        16
      ],
      "id": "f726be95-86fb-4328-baa6-f453d3f0ed0b",
      "name": "JSON TRANSFORM"
    },
    {
      "parameters": {
        "url": "=https://api.elevenlabs.io/v1/convai/conversations/{{ $json.conversationId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_81943a69fbe3d20130314878626d1c8618112d0c3a218c06"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        16
      ],
      "id": "0d231241-303c-4562-a1b6-07951cbbf370",
      "name": "obtem conversa 11labs"
    },
    {
      "parameters": {
        "description": "Pense sobre a sua resposta, veja realmente se entendeu a intenção do cliente. Atente aos dados da conversa e ao prompt\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1504,
        16
      ],
      "id": "89fccff1-8fc8-4c7e-befd-6fcab4dadf2c",
      "name": "Think"
    }
  ],
  "pinData": {},
  "connections": {
    "Get many rows": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "obtem conversa 11labs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "DETECTOR DE INTENCAO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "DETECTOR DE INTENCAO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SANITIZAR DADO": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DETECTOR DE INTENCAO": {
      "main": [
        [
          {
            "node": "JSON TRANSFORM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtem conversa 11labs": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "DETECTOR DE INTENCAO",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "JSON TRANSFORM": {
      "main": [
        [
          {
            "node": "SANITIZAR DADO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "88122f7c-557e-4f06-bb03-941a9410c021",
  "meta": {
    "instanceId": "c7d12b09f7706ff13009ec9c6baf8680ad3a1b952a3a4f5ec8ce77a4c9cd6936"
  },
  "id": "5oejH5FxtGgLk7uq",
  "tags": []
}